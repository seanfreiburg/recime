<h1>Final Report</h1>
<h2>Sean Freiburg, Brian Hauger, Cesar Martinez, Kenny Nsofor</h2>
<hr>

<h2>Briefly describe what the project accomplished.</h2>
<p>
  ReciMe is an application for managing your food inventory and recipes. ReciMe will take a user's food supply and find recipes that they can make with their ingredients. ReciMe will also allow users to enter which recipes they would like to make for the week and it will provide them with a shopping list of what they need to buy to make those recipes.
</p>

<h2>Discuss the usefulness of your project, i.e. what real problem you solved.</h2>
<p>
  This will solve the problem of users not being able to easily know whether they have all of the ingredients that they need to make a certain recipe. This functionality can be extended as well, allowing users to ensure that they have enough ingredients to make different recipes over extended periods of time. Conversely, ReciMe will also solve the problem of users “not knowing what to make” by providing them with different recipe options based on what they already have.
</p>
<p>
  Currently, websites do exist that can provide a user with a list of submitted recipes. However, none of them keep track of the user’s personal inventory of ingredients, and thus they cannot determine what the user has the ability to make or what the user needs to buy to be able to make a certain recipe. What we are providing with ReciMe is the ability to relate the foods that they eat with the ingredients that they have and will be able to generate shopping lists of what ingredients they need to purchase in order to cook the meal they desire.
</p>

<h2>Discuss the data in your database</h2>
<p>
  We have 4 main tables in our database that hold a majority of the data.
</p>
<p>
  The Users table contains all of the user information in the database.  It includes a user identifier, user name, and password.
</p>
<p>
  The Ingredients table contains all of the ingredients in the database.  It includes an ingredient identifier, ingredient name, and picture link.
</p>
<p>
  The Recipes table contains all of the recipes in the databases.  It includes a recipe identifier, recipe name, preparation time, and date created.
</p>
<p>
  The Lists table contains all of the shopping lists generated by our application.  It includes a list identifier, list name, date created, and the date updated.
</p>
<p>
  The rest of our tables are used to connect the tables described above.  They include tables connecting recipes to ingredients, lists to ingredients, users to ingredients, users to lists, and recipes to users.
</p>

<h2>Include your ER Diagram and Schema</h2>
<p>
  ER Diagram:<br>
  <img src="https://wiki.engr.illinois.edu/download/attachments/221615645/UntitledDocument.png?version=1&modificationDate=1361517884000">
</p>
<p>
  Schema<br>
  ingredient_recipes (ingredient_id, recipe_id, amount, created_at, updated_at)<br>
  ingredient_users (user_id, ingredient_id, amount, created_at, updated_at)<br>
  ingredients (name, picture, created_at, updated_at)<br>
  microposts (content, user_id, created_at, updated_at)<br>
  recipes (name, prep_time, description, user_id, created_at, updated_at)<br>
  shopping_lists (name, user_id, created_at, updated_at)<br>
  users (name, email, created_at, updated_at, password_digest, remember_token, admin)
</p>

<h2>Briefly discuss from where you collected data and how you did it (if crawling is automated, explain how and what tools were used)</h2>
<p>
  Since we ran into issues with the BigOven API, we decided to have user-entered data.  However, rather than enter in all of the data manually, we wrote some Ruby scripts to enter multiple different users, recipes, etc. in large amounts more quickly and easily.  We also added ourselves as real users to test all of the site’s functionality, so all data entered through the website will be there as well.
</p>

<h2>Clearly list the functionality of your application (feature specs)</h2>
<p>
  A user can register an account with our website.  They enter their name, email, and password to do so.  Duplicate emails are not allowed.
</p>
<p>
  From there, the user can add ingredients to their inventory and their favorite recipes to the database.  They can also create shopping lists for themselves.
</p>
<p>
  Once they are done setting up, users can use our application in many different ways.  If looking for a recipe, they can see what kinds of recipes they can currently make based on their current inventory.  They can also browse all of the recipes to find one they like, and generate a shopping list with all of the additional ingredients they will need to buy to be able to make that recipe.
</p>
<p>
  We will also recommend functionality that makes use of expiration dates of the food in a user’s inventory.  There will be a recommendation system such that if certain ingredients are about to expire, our application will recommend that the user make a recipe that makes use of those ingredients.
</p>

<h2>Explain one basic function</h2>
<p>
  One of the functions that our site offers is the ability to create and manage shopping lists.  Creating a shopping list is very simple, and can be done from the user's home page.  They simply enter the shopping list name into the input, and click the button.  Our code then adds a shopping list with the entered name and the user's user id, with a unique identifier, into the shopping_lists relation in our database.
</p>

<h2>Show the actual SQL code snippet</h2>
<p>
  <code>
    INSERT INTO shopping_lists (name, user_id, created_at, updated_at) VALUES (name_entered_in_form, current_user_id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
  </code>
</p>

<h2>List and briefly explain the dataflow, i.e. the steps that occur between a user entering the data on the screen and the output that occurs (you can insert a set of screenshots)</h2>
<p>
  To allow users to enter data, we make use of forms and the post method.  Most functions are similar, so the process for adding ingredients to one’s inventory will be shown here as an example.
</p>
<p>
  Once signed in, a user is taken to their home page, where they can see some of their basic information, recipes they have entered, shopping lists they have created, and their current food inventory.<br>
  PROFBEFORE IMAGE GOES HERE!!
</p>
<p>
  When the user clicks on the Add to Inventory button, they are redirected to the Add Ingredient page that contains the form for adding an ingredient to their inventory.<br>
  ADDING IMAGE GOES HERE!!
</p>
<p>
  Once they enter all of the information, the user clicks on the Create button.  From there, the information is grabbed from the form, and some small checks are made before entering the information into the database.  For example, if the user already has an ingredient with the same name, the quantity of that ingredient is simply updated instead.
</p>
<p>
  After that, the information is entered into the database and the user is redirected to their homepage, where they can see a small confirmation message and their newly added ingredient in their inventory.<br>
  PROFAFTER IMAGE GOES HERE!!
</p>

<h2>Explain your two advanced functions and why they are considered as advanced. Being able to do it is very important both in the report and final presentation.</h2>
<p>
  Our first advanced function will search for recipes a user can make based on the ingredients they currently have. This will be very useful for users who often find that they don’t know what they want to make, or what they can make, with the food they already have. This may also help users save money by efficiently using all of their own food to make meals instead of going out to eat.
</p>
<p>
  Our second advanced function will alert users of ingredients that are expiring soon and suggest recipes that use those ingredients, ensuring that they are used before they spoil. This would save users a lot of money by steering them away from needing to throw away any food – no more “cash in the trash”!
</p>
<p>
  These functions are advanced because they are quite involved when it comes to their actual implementation.  The first function requires gathering the user’s current ingredients, matching with the ingredients of all of the current recipes, figuring out which ones have them have the most in common, and displaying the results in an order that implies the most commonalities of ingredients.  The second function requires defining what “expiring soon” means, then gathering those expiring ingredients, looking for recipes that could make use of them, and then ranking which of these recipes will actually use the most of those expiring ingredients.  Further, as described above, these functions are both very useful to the user, and we like to think they’re pretty creative as well.
</p>

<h2>Describe one technical challenge that the team encountered.</h2>
<h3>This should be sufficiently detailed such that another future team could use this as helpful advice if they were to start a similar project or were to maintain your project.</h3>
<p>
  One challenge we ended up running into was an underestimation of a learning curve for the framework we were planning on using.  Initially, we thought that CakePHP would be the way to go for us, and that is how we started our project.  After a while, though, we found that we were doing a lot more researching and learning about the framework itself rather than making true progress on the project.  In the end, we decided to go with Ruby on Rails.  We were much more familiar with it and were able to be much more productive once we made the switch.
</p>
<p>
  Our advice for future teams: for the purposes of this project, just stick with what you know!  If you already know of a decent framework or technology that you know you can complete your project in, just start with that from the very beginning.  You could spend some time learning about a new technology that just might help you in the long run, but there is definitely some risk involved in that decision.  Most importantly, make sure you are always making progress on the actual project.  If you’re not procrastinating and you’re not making progress, it may very well be time to check in with the efficiency of the technologies you are trying to use.
</p>

<h2>State if everything went according to the initial development plan and proposed specifications, if not - why?! That's also possible.</h2>
<p>
  As stated above, the main thing that did not go to plan was the framework that we ended up not using.  We lost some of the time and effort that we had put into making CakePHP work, but we are gaining much more now that we have switched to the more familiar Ruby on Rails framework instead.
</p>
<p>
  Also, we decided to make our data user-entered instead of going with the BigOven API.  We ran into some problems early on with the API, and after some effort, decided that it would be more important to focus our efforts on more class-relevant parts of the project.  This gives us a smaller database of recipes to begin with, but we do have sufficient user-entered data to show our desired functionality.
</p>
<p>
  Besides that, almost everything else went to the initial development plan, and we are excited about how the project turned out!
</p>

<h2>Describe the final division of labor and how did you manage team work.</h2>
<p>
  The final division of work was quite similar to what we had originally planned.  Sean contributed a majority of the work related to starting up the website, and worked a lot with the queries as well.  Brian was going to work with the BigOven API, though we decided to go in a different direction, and some of the back-end functionality as well.  Cesar did a majority of the non-technical work, including the final report, and made other small contributions as well.  Kenny worked with our advanced functionality and created the demo video as well.  In general, we worked as a team to make sure that all aspects of the project were going to get done in a timely manner.
</p>